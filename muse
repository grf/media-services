#!/usr/bin/env ruby
#
# Talk to a cvlc server via HTTP commands such as:
#
#   http://satyagraha.sacred.net:9090/requests/status.xml?command=volume&val=100
#
# One starts cvlc server as so:
#
#   cvlc --file-logging --logfile ~/cvlc.txt --daemon --intf http --http-host 0.0.0.0 --http-port 9090 --http-password foo
#

$LOAD_PATH.unshift File.dirname(__FILE__)

require 'command-executor'
require 'repl'
require 'cvlc-server'

class MuseError < StandardError; end

def setup_commands(server, music_root)

  cvlc = CvlcServer.new(server, music_root)

  fail MuseError, "Can't connect to music server" unless cvlc.ping

  commands = CommandExecutor.new

  # cvlc.do_help(commands) where commands should be what's returned by CommandExecutor.new...

  [
    [ 'delete',   ->(id)  { cvlc.do_delete_id(id) }, Fixnum,  'Remove item <num> from the playlist' ],
    [ 'play',     ->(id)  { cvlc.do_play_id(id) },   Fixnum,  'Play item <num> from the playlist' ],
    [ 'volume',   ->(lvl) { cvlc.do_volume(lvl) },   Fixnum,  'Set volume to <num>,  0..300' ],

    [ 'add',      ->(dir) { cvlc.do_add(dir) },      String,  'Add directory or filename <string> to the playlist, begin playing there' ],
    [ 'enqueue',  ->(dir) { cvlc.do_enqueue(dir) },  String,  'Add directory or filename <string> to the end of the playlist, continue with current song' ],
    [ 'seek',     ->(amt) { cvlc.do_seek(amt) },     String,  'Seek +/- seconds or percent - e.g. -10 or +25% ' ],

    [ '?',        -> { cvlc.do_help(commands) },  nil,  'This help' ],
    [ 'clear',    -> { cvlc.do_clear_playlist },  nil,  'Clear the playlist' ],
    [ 'list',     -> { cvlc.do_list },            nil,  'Print the current playlist' ],
    [ 'loop',     -> { cvlc.do_toggle_loop },     nil,  'Toggle looping' ],
    [ 'next',     -> { cvlc.do_next },            nil,  'Play next entry on the playlist' ],
    [ 'pause',    -> { cvlc.do_force_pause },     nil,  'Pause playing' ],
    [ 'previous', -> { cvlc.do_previous },        nil,  'Play the previous entry' ],
    [ 'random',   -> { cvlc.do_toggle_random },   nil,  'Toggle random play' ],
    [ 'repeat',   -> { cvlc.do_toggle_repeat },   nil,  'Toggle repeat' ],
    [ 'resume',   -> { cvlc.do_force_resume },    nil,  'Resume playing' ],
    [ 'status',   -> { cvlc.do_status },          nil,  'Pretty print status of cvlc server' ],
    [ 'stop',     -> { cvlc.do_stop },            nil,  'Stop playing' ],

  ].each { |cmd|  commands.add(*cmd) }

  return commands
end

class MuseRepl < Repl
  def execute(command)
    command = 'play ' + command if command.strip =~ /^\d+$/
    super(command)
  end
end

# main()

cmdr = setup_commands('http://:foo@satyagraha.sacred.net:9090/', '/data/Music/')
muse = MuseRepl.new(cmdr, 'muse> ')
muse.debug = false
muse.repl
