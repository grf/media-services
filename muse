#!/usr/bin/env ruby
#
# Talk to a cvlc server via HTTP commands such as:
#
#   http://satyagraha.sacred.net:9090/requests/status.xml?command=volume&val=100
#
# One starts cvlc server as so:
#
#   cvlc --file-logging --logfile ~/cvlc.txt --daemon --intf http --http-host 0.0.0.0 --http-port 9090 --http-password foo
#
# This client code provides a read-eval-print loop (REPL) that lets
# you communicate with the cvlc server, so that you can maintain a
# playlist, adjust volumes, next/prev/random controls, etc.

# TODO: abstract REPL into a class if possible

$LOAD_PATH.unshift File.dirname(__FILE__)

require 'command-executor'
require 'cvlc-server'

class MuseError < StandardError; end

STDOUT.sync     = true                    # REPL needs immediate flush

# Top level REPL (Read-Eval-Print Loop).

def main supported_commands
  while true
    write("muse> ")
    command = get()
    goodbye if command.nil?
    response = execute(supported_commands, command)
    writeln(response.chomp) unless response.nil? or response.empty?
  end
rescue => exception
  error_message(supported_commands, exception)
  retry
end

private

def goodbye
  writeln "Goodbye, and thanks for all the fish!"
  exit
end

# TODO: abstract away list of covered exceptions

def error_message supported_commands, exception
  writeln supported_commands.usage, "\n", exception.message
  unless [ CvlcServerError, CommandExecutorError, MuseError ].include? exception.class
    writeln exception.class, "\n", exception.backtrace.join("\n")
  end
end

# The 'P' in the REPL: write(text, text...) ship out supplied text
# strings.

def write *text
  STDOUT.write text.flatten.join() unless text.empty?
end

def writeln *text
  write text, "\n"  unless text.empty?
end

# The 'R' in the REPL: get() - reads and cleans up input, exiting if
# EOF has been reached (^D is entered, normally).  Input is returned
# otherwise.

def get
  input = STDIN.gets
  return unless input
  return input.strip
end

# The 'E' in the REPL is mostly done by the CommandExecutor object
# method CommandExecutor#execute(String).
#
# Here we're just fielding any special conditions specific to this
# program.

def execute supported, command
   return supported.execute("play #{command}") if command =~ /^\d+$/
   return supported.execute(command)
end

# The setup_commands() creates the CommandEexcutor object, providing
# all the information needed for executing the various functions the
# user enters in the REPL loop, as well as providing help text, etc.

def setup_commands server, music_root
  cvlc = CvlcServer.new server, music_root
  commands = CommandExecutor.new

  commands.add('delete',   lambda { |id|  cvlc.do_delete_id(id) },     Fixnum,  "remove item <num> from the playlist")
  commands.add('play',     lambda { |id|  cvlc.do_play_id(id) },       Fixnum,  "play item <num> from the playlist")
  commands.add('volume',   lambda { |level|  cvlc.do_volume(level) },  Fixnum,  "set volume to <num>,  0..300")

  commands.add('add',      lambda { |dir|  cvlc.do_add(dir) },         String,  "add directory or filename <string> to the playlist, begin playing there")
  commands.add('enqueue',  lambda { |dir|  cvlc.do_enqueue(dir) },     String,  "add directory or filename <string> to the end of the playlist, continue with current song")
  commands.add('seek',     lambda { |amount|  cvlc.do_seek(amount) },  String,  "seek +/- seconds or percent - e.g. -10 or +25% ")

  # cvlc.do_help(commands) is problematic... do_help should be moved up here, sorta... delegate across all kinds of commands (like vsx.methods when we do that?

  commands.add('?',        lambda { cvlc.do_help(commands) },          nil,     "this help")
  commands.add('clear',    lambda { cvlc.do_clear_playlist() },        nil,     "clear the playlist")
  commands.add('list',     lambda { cvlc.do_list() },                  nil,     "print the current playlist")
  commands.add('loop',     lambda { cvlc.do_toggle_loop() },           nil,     "toggle looping")
  commands.add('next',     lambda { cvlc.do_next() },                  nil,     "play next entry on the playlist")
  commands.add('pause',    lambda { cvlc.do_force_pause() },           nil,     "pause playing")
  commands.add('previous', lambda { cvlc.do_previous() },              nil,     "play the previous entry")
  commands.add('random',   lambda { cvlc.do_toggle_random() },         nil,     "toggle random play")
  commands.add('repeat',   lambda { cvlc.do_toggle_repeat() },         nil,     "toggle repeat")
  commands.add('resume',   lambda { cvlc.do_force_resume() },          nil,     "resume playing")
  commands.add('status',   lambda { cvlc.do_status() },                nil,     "pretty print status of cvlc server")
  commands.add('stop',     lambda { cvlc.do_stop() },                  nil,     "stop playing")

  return commands
end

main(setup_commands("http://:foo@satyagraha.sacred.net:9090/", "/data/Music/"))
